kind: pipeline
name: Linters
type: docker

platform:
  os: linux
  arch: amd64
node:
  server: home
  arm: no
  docker: yes

trigger:
  event:
    include:
      - push
    exclude:
      - pull_request
  branch:
    - main

steps:
  - name: YAML Validate
    image: sdesbure/yamllint:latest
    commands:
      - yamllint -c ./.yamllint .

  - name: Kubernetes Resources Validation
    image: grubertech/kubeval:latest
    commands:
      - find . -maxdepth 10 -name \*svc.yaml -exec kubeval {} \;
      - find . -maxdepth 10 -name deployment.yaml -exec kubeval {} \;
      - find . -maxdepth 10 -name \*secret.yaml -exec kubeval {} \;
      - find . -maxdepth 10 -name cm.yaml -exec kubeval {} \;
      - find . -maxdepth 10 -name pvc.yaml -exec kubeval {} \;
      - find . -maxdepth 10 -name pv.yaml -exec kubeval {} \;
      - find . -maxdepth 10 -name role.yaml -exec kubeval {} \;
      - find . -maxdepth 10 -name sa.yaml -exec kubeval {} \;
      - find . -maxdepth 10 -name cr.yaml -exec kubeval {} \;
      - find . -maxdepth 10 -name rb.yaml -exec kubeval {} \;

---

kind: pipeline
name: k3d CI
type: docker

platform:
  os: linux
  arch: amd64
node:
  server: home
  arm: no
  docker: yes

depends_on:
  - Linters

trigger:
  event:
    include:
      - push
    exclude:
      - pull_request
  branch:
    - main

steps:
  - name: Create Namespaces
    image: bitnami/kubectl:1.24.4
    user: root # the bitnami/kubectl image has a non-root user set by default, which does not work with the shared docker volume which is owned by root
    commands:
      - export KUBECONFIG=kubeconfig-$${DRONE_BUILD_STARTED}.yaml
      - until test -f $${KUBECONFIG}; do sleep 1s; done # wait for k3d service to write the kubeconfig to the workspace
      - kubectl config view
      - kubectl get pods --all-namespaces
      - kubectl create namespace databases

  - name: Install PostgreSQL
    image: bitnami/kubectl:1.24.4
    user: root # the bitnami/kubectl image has a non-root user set by default, which does not work with the shared docker volume which is owned by root
    commands:
      - kubectl apply -k ./apps/data/postgres
    depends_on:
      - Create Namespaces

  - name: Finalize
    image: rancher/k3d:5.3.0-dind
    volumes:
    - name: dockersock
      path: /var/run/docker.sock
    privileged: true
    user: root # the bitnami/kubectl image has a non-root user set by default, which does not work with the shared docker volume which is owned by root
    commands:
      - k3d cluster delete --config test/k3d.yaml
    depends_on:
      - Create Namespaces
      - Install PostgreSQL

services:
  - name: k3dsvc
    image: rancher/k3d:5.3.0-dind
    volumes:
    - name: dockersock
      path: /var/run/docker.sock
    privileged: true
    commands:
      - nohup dockerd-entrypoint.sh & # start docker in the background
      - until docker ps 2>&1 > /dev/null; do sleep 1s; done # wait for docker to be ready before proceeding
      - k3d cluster create --config test/k3d.yaml --api-port k3dsvc:6445 # create k3d cluster from config file
      - until kubectl get deployment coredns -n kube-system -o go-template='{{.status.availableReplicas}}' | grep -v -e '<no value>'; do sleep 1s; done # wait for coredns to be up and running
      - k3d kubeconfig get drone > kubeconfig-$${DRONE_BUILD_STARTED}.yaml
      - printf "\nk3d is ready! \n\n"
      - tail -f /dev/null # chill around while the steps do their work

volumes:
- name: dockersock
  host:
    path: /var/run/docker.sock