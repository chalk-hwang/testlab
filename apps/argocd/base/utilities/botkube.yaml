apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: botkube
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: monitoring
  source:
    repoURL: https://charts.botkube.io
    chart: botkube
    targetRevision: v0.16.0
    helm:
      releaseName: botkube
      values: |
        image:
          registry: ghcr.io
          repository: kubeshop/botkube
          pullPolicy: IfNotPresent
          tag: v0.16.0
        podSecurityPolicy:
          enabled: false
        securityContext:
          runAsUser: 101
          runAsGroup: 101
        containerSecurityContext:
          privileged: false
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
        kubeconfig:
          enabled: true
          existingSecret: "botkube-kubeconfig"
        actions:
          'describe-created-resource':
            enabled: true
            displayName: "Describe created resource"
            command: "kubectl describe {{ .Event.TypeMeta.Kind | lower }}{{ if .Event.Namespace }} -n {{ .Event.Namespace }}{{ end }} {{ .Event.Name }}"
            bindings:
              sources:
                - k8s-create-events
              executors:
                - kubectl-read-only
          'show-logs-on-error':
            enabled: true
            displayName: "Show logs on error"
            command: "kubectl logs {{ .Event.TypeMeta.Kind | lower }}/{{ .Event.Name }} -n {{ .Event.Namespace }}"
            bindings:
              sources:
                - k8s-err-with-logs-events
              executors:
                - kubectl-read-only
        sources:
          'k8s-recommendation-events':
            displayName: "Kubernetes Recommendations"
            kubernetes:
              recommendations:
                pod:
                  noLatestImageTag: true
                  labelsSet: true
                ingress:
                  backendServiceValid: true
                  tlsSecretValid: true

          'k8s-all-events':
            displayName: "Kubernetes Info"
            kubernetes:
              namespaces: &k8s-events-namespaces
                include:
                  - ".*"
              event:
                types:
                  - create
                  - delete
                  - error
                reason: ""
                message: ""

              annotations: {}
              labels: {}
              resources:
                - type: v1/pods
                #  namespaces:             # Overrides 'source'.kubernetes.namespaces
                #    include:
                #      - ".*"
                #    exclude: []
                #  annotations: {}         # Overrides 'source'.kubernetes.annotations
                #  labels: {}              # Overrides 'source'.kubernetes.labels
                #  name: "" # Optional resource name regex.
                #  event:
                #    reason: ""            # Overrides 'source'.kubernetes.event.reason
                #    message: ""           # Overrides 'source'.kubernetes.event.message
                #    types:                # Overrides 'source'.kubernetes.event.types
                #      - create
                - type: v1/services
                - type: networking.k8s.io/v1/ingresses
                - type: v1/nodes
                - type: v1/namespaces
                - type: v1/persistentvolumes
                - type: v1/persistentvolumeclaims
                - type: v1/configmaps
                - type: rbac.authorization.k8s.io/v1/roles
                - type: rbac.authorization.k8s.io/v1/rolebindings
                - type: rbac.authorization.k8s.io/v1/clusterrolebindings
                - type: rbac.authorization.k8s.io/v1/clusterroles
                - type: apps/v1/daemonsets
                  event: # Overrides 'source'.kubernetes.event
                    types:
                      - create
                      - update
                      - delete
                      - error
                  updateSetting:
                    includeDiff: true
                    fields:
                      - spec.template.spec.containers[*].image
                      - status.numberReady
                - type: batch/v1/jobs
                  event: # Overrides 'source'.kubernetes.event
                    types:
                      - create
                      - update
                      - delete
                      - error
                  updateSetting:
                    includeDiff: true
                    fields:
                      - spec.template.spec.containers[*].image
                      - status.conditions[*].type
                - type: apps/v1/deployments
                  event: # Overrides 'source'.kubernetes.event
                    types:
                      - create
                      - update
                      - delete
                      - error
                  updateSetting:
                    includeDiff: true
                    fields:
                      - spec.template.spec.containers[*].image
                      - status.availableReplicas
                - type: apps/v1/statefulsets
                  event: # Overrides 'source'.kubernetes.event
                    types:
                      - create
                      - update
                      - delete
                      - error
                  updateSetting:
                    includeDiff: true
                    fields:
                      - spec.template.spec.containers[*].image
                      - status.readyReplicas
              ## Custom resource example
              # - type: velero.io/v1/backups
              #   namespaces:
              #     include:
              #       - ".*"
              #     exclude:
              #       -
              #   event:
              #     types:
              #       - create
              #       - update
              #       - delete
              #       - error
              #   updateSetting:
              #     includeDiff: true
              #     fields:
              #       - status.phase

          'k8s-err-events':
            displayName: "Kubernetes Errors"
            kubernetes:
              namespaces: *k8s-events-namespaces
              event:
                types:
                  - error
              resources:
                - type: v1/pods
                - type: v1/services
                - type: networking.k8s.io/v1/ingresses
                - type: v1/nodes
                - type: v1/namespaces
                - type: v1/persistentvolumes
                - type: v1/persistentvolumeclaims
                - type: v1/configmaps
                - type: rbac.authorization.k8s.io/v1/roles
                - type: rbac.authorization.k8s.io/v1/rolebindings
                - type: rbac.authorization.k8s.io/v1/clusterrolebindings
                - type: rbac.authorization.k8s.io/v1/clusterroles
                - type: apps/v1/deployments
                - type: apps/v1/statefulsets
                - type: apps/v1/daemonsets
                - type: batch/v1/jobs
          'k8s-err-with-logs-events':
            displayName: "Kubernetes Errors for resources with logs"
            kubernetes:
              namespaces: *k8s-events-namespaces
              event:
                types:
                  - error
              resources:
                - type: v1/pods
                - type: apps/v1/deployments
                - type: apps/v1/statefulsets
                - type: apps/v1/daemonsets
                - type: batch/v1/jobs
          'k8s-create-events':
            displayName: "Kubernetes Resource Created Events"
            kubernetes:
              namespaces: *k8s-events-namespaces
              event:
                # -- Lists all event types to be watched.
                types:
                  - create
              resources:
                - type: v1/pods
                - type: v1/services
                - type: networking.k8s.io/v1/ingresses
                - type: v1/nodes
                - type: v1/namespaces
                - type: v1/configmaps
                - type: apps/v1/deployments
                - type: apps/v1/statefulsets
                - type: apps/v1/daemonsets
                - type: batch/v1/jobs
        filters:
          kubernetes:
            objectAnnotationChecker: true
            nodeEventsChecker: true
        executors:
          'kubectl-read-only':
            ## Kubectl executor configuration.
            kubectl:
              namespaces:
                include:
                  - ".*"
                exclude: []
              enabled: true
              ## List of allowed `kubectl` commands.
              commands:
                verbs: ["api-resources", "api-versions", "cluster-info", "describe", "explain", "get", "logs", "top"]
                resources: ["deployments", "pods", "namespaces", "daemonsets", "statefulsets", "storageclasses", "nodes", "configmaps", "services", "ingresses"]
              defaultNamespace: default
              restrictAccess: false
        existingCommunicationsSecretName: "botkube-vars"
        communications:
          'default-group':
            ## Settings for Slack.
            slack:
              # -- If true, enables Slack bot.
              enabled: false
              # -- Map of configured channels. The property name under `channels` object is an alias for a given configuration.
              #
              ## Format: channels.{alias}
              channels:
                'default':
                  # -- Slack channel name without '#' prefix where you have added Botkube and want to receive notifications in.
                  name: 'SLACK_CHANNEL'
                  notification:
                    # -- If true, the notifications are not sent to the channel. They can be enabled with `@Botkube` command anytime.
                    disabled: false
                  bindings:
                    # -- Executors configuration for a given channel.
                    executors:
                      - kubectl-read-only
                    # -- Notification sources configuration for a given channel.
                    sources:
                      - k8s-err-events
                      - k8s-recommendation-events
              # -- Slack token.
              token: ''
              notification:
                # -- Configures notification type that are sent. Possible values: `short`, `long`.
                type: short

            ## Settings for Slack with Socket Mode.
            socketSlack:
              # -- If true, enables Slack bot.
              enabled: false
              # -- Map of configured channels. The property name under `channels` object is an alias for a given configuration.
              #
              ## Format: channels.{alias}
              channels:
                'default':
                  # -- Slack channel name without '#' prefix where you have added Botkube and want to receive notifications in.
                  name: 'SLACK_CHANNEL'
                  bindings:
                    # -- Executors configuration for a given channel.
                    executors:
                      - kubectl-read-only
                    # -- Notification sources configuration for a given channel.
                    sources:
                      - k8s-err-events
                      - k8s-recommendation-events
              # -- Slack bot token for your own Slack app.
              # [Ref doc](https://api.slack.com/authentication/token-types).
              botToken: ''
              # -- Slack app-level token for your own Slack app.
              # [Ref doc](https://api.slack.com/authentication/token-types).
              appToken: ''
              notification:
                # -- Configures notification type that are sent. Possible values: `short`, `long`.
                type: short
            ## Settings for Mattermost.
            mattermost:
              # -- If true, enables Mattermost bot.
              enabled: false
              # -- User in Mattermost which belongs the specified Personal Access token.
              botName: 'Botkube'
              # -- The URL (including http/https schema) where Mattermost is running. e.g https://example.com:9243
              url: 'MATTERMOST_SERVER_URL'
              # -- Personal Access token generated by Botkube user.
              token: 'MATTERMOST_TOKEN'
              # -- The Mattermost Team name where Botkube is added.
              team: 'MATTERMOST_TEAM'
              # -- Map of configured channels. The property name under `channels` object is an alias for a given configuration.
              #
              ## Format: channels.{alias}
              channels:
                'default':
                  # -- The Mattermost channel name for receiving Botkube alerts.
                  # The Botkube user needs to be added to it.
                  name: 'MATTERMOST_CHANNEL'
                  notification:
                    # -- If true, the notifications are not sent to the channel. They can be enabled with `@Botkube` command anytime.
                    disabled: false
                  bindings:
                    # -- Executors configuration for a given channel.
                    executors:
                      - kubectl-read-only
                    # -- Notification sources configuration for a given channel.
                    sources:
                      - k8s-err-events
                      - k8s-recommendation-events
              notification:
                # -- Configures notification type that are sent. Possible values: `short`, `long`.
                type: short

            ## Settings for MS Teams.
            teams:
              # -- If true, enables MS Teams bot.
              enabled: false
              # -- The Bot name set while registering Bot to MS Teams.
              botName: 'Botkube'
              # -- The Botkube application ID generated while registering Bot to MS Teams.
              appID: 'APPLICATION_ID'
              # -- The Botkube application password generated while registering Bot to MS Teams.
              appPassword: 'APPLICATION_PASSWORD'
              bindings:
                # -- Executor bindings apply to all MS Teams channels where Botkube has access to.
                executors:
                  - kubectl-read-only
                # -- Source bindings apply to all channels which have notification turned on with `@Botkube start notifications` command.
                sources:
                  - k8s-err-events
                  - k8s-recommendation-events
              # -- The path in endpoint URL provided while registering Botkube to MS Teams.
              messagePath: "/bots/teams"
              # -- The Service port for bot endpoint on Botkube container.
              port: 3978

            ## Settings for Discord.
            discord:
              # -- If true, enables Discord bot.
              enabled: false
              # -- Botkube Bot Token.
              token: 'DISCORD_TOKEN'
              # -- Botkube Application Client ID.
              botID: 'DISCORD_BOT_ID'
              # -- Map of configured channels. The property name under `channels` object is an alias for a given configuration.
              #
              ## Format: channels.{alias}
              channels:
                'default':
                  # -- Discord channel ID for receiving Botkube alerts.
                  # The Botkube user needs to be added to it.
                  id: 'DISCORD_CHANNEL_ID'
                  notification:
                    # -- If true, the notifications are not sent to the channel. They can be enabled with `@Botkube` command anytime.
                    disabled: false
                  bindings:
                    # -- Executors configuration for a given channel.
                    executors:
                      - kubectl-read-only
                    # -- Notification sources configuration for a given channel.
                    sources:
                      - k8s-err-events
                      - k8s-recommendation-events
              notification:
                # -- Configures notification type that are sent. Possible values: `short`, `long`.
                type: short

            ## Settings for Elasticsearch.
            elasticsearch:
              # -- If true, enables Elasticsearch.
              enabled: false
              awsSigning:
                # -- If true, enables awsSigning using IAM for Elasticsearch hosted on AWS. Make sure AWS environment variables are set.
                # [Ref doc](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html).
                enabled: false
                # -- AWS region where Elasticsearch is deployed.
                awsRegion: "us-east-1"
                # -- AWS IAM Role arn to assume for credentials, use this only if you don't want to use the EC2 instance role or not running on AWS instance.
                roleArn: ""
              # -- The server URL, e.g https://example.com:9243
              server: 'ELASTICSEARCH_ADDRESS'
              # -- Basic Auth username.
              username: 'ELASTICSEARCH_USERNAME'
              # -- Basic Auth password.
              password: 'ELASTICSEARCH_PASSWORD'
              # -- If true, skips the verification of TLS certificate of the Elastic nodes.
              # It's useful for clusters with self-signed certificates.
              skipTLSVerify: false
              # -- Map of configured indices. The `indices` property name is an alias for a given configuration.
              #
              ## Format: indices.{alias}
              indices:
                'default':
                  # -- Configures Elasticsearch index settings.
                  name: botkube
                  type: botkube-event
                  shards: 1
                  replicas: 0
                  bindings:
                    # -- Notification sources configuration for a given index.
                    sources:
                      - k8s-err-events
                      - k8s-recommendation-events

            ## Settings for Webhook.
            webhook:
              # -- If true, enables Webhook.
              enabled: false
              # -- The Webhook URL, e.g.: https://example.com:80
              url: 'WEBHOOK_URL'
              bindings:
                # -- Notification sources configuration for the webhook.
                sources:
                  - k8s-err-events
                  - k8s-recommendation-events
        settings:
          clusterName: default
          lifecycleServer:
            enabled: true
            port: 2113
          upgradeNotifier: true
          log:
            level: info
            disableColors: false
          systemConfigMap:
            name: botkube-system
          persistentConfig:
            startup:
              configMap:
                name: botkube-startup-config
                annotations: {}
              fileName: "_startup_state.yaml"
            runtime:
              configMap:
                name: botkube-runtime-config
                annotations: {}
              fileName: "_runtime_state.yaml"
        ssl:
          enabled: false
          existingSecretName: ""
          cert: ""
        service:
          name: metrics
          port: 2112
          targetPort: 2112
        ingress:
          create: false
          annotations:
            kubernetes.io/ingress.class: nginx
          host: 'HOST'
          tls:
            enabled: false
            secretName: ''
        serviceMonitor:
          enabled: false
          interval: 10s
          path: /metrics
          port: metrics
          labels: {}
        deployment:
          # -- Extra annotations to pass to the Botkube Deployment.
          annotations: {}
        replicaCount: 1
        extraAnnotations: {}
        extraLabels: {}
        priorityClassName: ""
        nameOverride: ""
        fullnameOverride: ""
        resources:
          limits:
            cpu: 150m
            memory: 350Mi
          requests:
            cpu: 50m
            memory: 128Mi
        extraEnv: []
        #  - name: {key}
        #    valueFrom:
        #      configMapKeyRef:
        #        name: configmap-name
        #        key: value_key
        #  - name: {key}
        #    value: value

        extraVolumes: []
        # - name: extra-volume-0
        #   secret:
        #     secretName: {secret-name}
        #
        ## For CSI e.g. Vault:
        # - name: secrets-store-inline
        #   csi:
        #     driver: secrets-store.csi.k8s.io
        #     readOnly: true
        #     volumeAttributes:
        #       secretProviderClass: "vault-database"

        # -- Extra volume mounts to pass to the Botkube container.
        # [Ref docs](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#volumes-1).
        extraVolumeMounts: []
        # - name: extra-volume-0
        #   mountPath: /mnt/volume0
        #   readOnly: true
        # - name: extra-volume-1
        #   mountPath: /mnt/volume1
        #   readOnly: true
        # - name: secret-files
        #   mountPath: /etc/secrets
        #   subPath: ""
        #
        ## For CSI e.g. Vault:
        # - name: secrets-store-inline
        #   mountPath: "/mnt/secrets-store"
        #   readOnly: true
        nodeSelector: {}
        tolerations: []
        affinity: {}
        rbac:
          create: true
          rules:
            - apiGroups: ["*"]
              resources: ["*"]
              verbs: ["get", "watch", "list"]
        serviceAccount:
          create: true
          name: ""
          annotations: {}
        extraObjects: []
        analytics:
          disable: true
        configWatcher:
          enabled: true
          tmpDir: "/tmp/watched-cfg/"
          initialSyncTimeout: 0
          image:
            registry: ghcr.io
            repository: kubeshop/k8s-sidecar # kiwigrid/k8s-sidecar:1.19.5 - see https://github.com/kubeshop/k8s-sidecar/pull/1
            tag: ignore-initial-events
            pullPolicy: IfNotPresent

  destination:
    namespace: monitoring
    name: in-cluster
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: true
    syncOptions:
    - Validate=false
    - CreateNamespace=false
    - PrunePropagationPolicy=foreground
    - PruneLast=false
    - ApplyOutOfSyncOnly=false
    - Prune=true
    retry:
      limit: 5
      backoff:
        duration: 20s
        factor: 2
        maxDuration: 15m
