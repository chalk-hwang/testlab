version: '3'

silent: true

includes:
  argocd: ./tasks/argocd.yaml
  vault: ./tasks/vault.yaml
  tailscale: ./tasks/tailscale.yaml

vars:
  CYAN: tput setaf 6
  RED: tput setaf 1
  YELLOW: tput setaf 3
  GREEN: tput setaf 2
  BLUE: tput setaf 1
  PURPLE: tput setaf 5
  BG_B: tput setab 0
  BOLD: tput bold
  RESET: tput sgr0
  CLEAR: tput reset
  PATH_ERROR: is not installed or correctly configured in PATH.

dotenv: ['.env']

tasks:
  clear:
    cmds:
      - sleep 0.1 && {{.CLEAR}}
  highlight_bg:
    cmds:
      - |
        sleep 0.1 && \
        {{.CYAN}} && \
        {{.BOLD}} && \
        {{.BG_B}}
  highlight_normal:
    cmds:
      - |
        sleep 0.1 && \
        {{.CYAN}} && \
        {{.BOLD}}
  reset:
    cmds:
      - |
        sleep 0.1 && \
        {{.RESET}}

  explain:
    desc: Explains a certain Task command more in-detail
    cmds:
      - task {{.CLI_ARGS}} --summary

  validate:
    preconditions:
      - sh: "which kubeval"
        msg: "kubeval {{.PATH_ERROR}}"
    desc: Validates your Yaml objects in the repository using Kubeval
    cmds:
      # yamllint disable-line rule:line-length
      - sleep 0.1 && {{.CYAN}} && {{.BOLD}} && {{.BG_B}} && echo -e "\nValidating Yaml files using Kubeval..." && {{.RESET}}
      - sleep 0.1 && {{.CYAN}} && echo -e "\nService object files" && {{.RESET}}
      - find . -maxdepth 10 -name \*-svc.yaml -exec kubeval {} \;
      - sleep 0.1 && {{.CYAN}} && echo -e "\nDeployment object files" && {{.RESET}}
      - find . -maxdepth 10 -name \*-deployment.yaml -exec kubeval {} \;
      - sleep 0.1 && {{.CYAN}} && echo -e "\nSecret object files" && {{.RESET}}
      - find . -maxdepth 10 -name \*-secret.yaml -exec kubeval {} \;
      - sleep 0.1 && {{.CYAN}} && echo -e "\nconfigMap object files" && {{.RESET}}
      - find . -maxdepth 10 -name \*-cm.yaml -exec kubeval {} \;
      - sleep 0.1 && {{.CYAN}} && echo -e "\nPVC object files" && {{.RESET}}
      - find . -maxdepth 10 -name \*-pvc.yaml -exec kubeval {} \;
      - sleep 0.1 && {{.CYAN}} && echo -e "\nPV object files" && {{.RESET}}
      - find . -maxdepth 10 -name \*-pv.yaml -exec kubeval {} \;
      # yamllint disable-line rule:line-length
      - sleep 0.1 && {{.CYAN}} && echo -e "\nCustomRoleBinding object files" && {{.RESET}}
      - find . -maxdepth 10 -name \*-crb.yaml -exec kubeval {} \;
      - sleep 0.1 && {{.CYAN}} && echo -e "\nRole object files" && {{.RESET}}
      - find . -maxdepth 10 -name \*-role.yaml -exec kubeval {} \;
      - sleep 0.1 && {{.CYAN}} && echo -e "\nServiceAccount object files" && {{.RESET}}
      - find . -maxdepth 10 -name \*-sa.yaml -exec kubeval {} \;
      - sleep 0.1 && {{.CYAN}} && echo -e "\n ClusterRole object files" && {{.RESET}}
      - find . -maxdepth 10 -name \*-cr.yaml -exec kubeval {} \;
      - sleep 0.1 && {{.CYAN}} && echo -e "\nRole Binding object files" && {{.RESET}}
      - find . -maxdepth 10 -name \*-rb.yaml -exec kubeval {} \;
    silent: true

  test:k3d:
    desc: Starts your local k3d cluster.
    preconditions:
      - sh: "which k3d"
        msg: "k3d {{.PATH_ERROR}}"
    summary: |
      Creating a k3d cluster

      This command ensures the cluster on k3d will
      be created with all the correct parameters, allowing
      for a declarative setup that requires minimal intervention
      to work. k3d is configured to automatically create an entry
      on your KUBECONFIG file and update it to point towards the cluster.

      All commands that create resources also are specific to the cluster
      name configured on the file ('k3d-demo'), as to avoid creating those
      resoures on non-local clusters that may be on KUBECONFIG file as well.
    cmds:
      - task: clear
      - sudo k3d cluster delete homelab-testing
      - sudo k3d cluster create --config test/k3d.yaml
      - task: highlight_normal
      - echo -e "\nYour cluster has been created. Type 'k3d cluster list' to confirm."
      - task: reset
    ignore_error: true
